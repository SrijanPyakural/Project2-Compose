# docker-compose.yml
# Purpose: Run Jenkins + Docker-in-Docker (DinD) for CI builds.
# Key points:
# - DinD exposes a secure Docker daemon over TLS.
# - Jenkins talks to that daemon via DOCKER_HOST=tcp://docker:2376.
# - The "docker" hostname is provided by a network alias on the shared network.
# - We mount the same jenkins-data volume into DinD so bind-mounts of
#   /var/jenkins_home/workspace/... (used by dockerized stages) work from DinD.

name: project2-compose

services:
  dind:
    image: docker:27-dind                     # DinD image providing a Docker daemon
    container_name: dind
    privileged: true                          # Required by DinD to run dockerd
    environment:
      - DOCKER_TLS_CERTDIR=/certs             # Enable TLS; certs are generated at /certs
    networks:
      jenkins:
        aliases: [docker]                     # ✅ Critical: Jenkins resolves DOCKER_HOST "docker"
    volumes:
      - docker-certs-ca:/certs/ca             # CA certs generated by DinD
      - docker-certs-client:/certs/client     # Client certs consumed by Jenkins
      - docker-cache:/var/lib/docker          # Docker layer/image cache (faster builds)
      - jenkins-data:/var/jenkins_home        # ✅ Share Jenkins home so bind-mounts exist on DinD
    healthcheck:
      test: ["CMD", "docker", "info"]         # Wait until daemon is ready before Jenkins starts
      interval: 10s
      timeout: 5s
      retries: 5

  jenkins:
    # We build a custom Jenkins image that has the Docker CLI inside,
    # so pipeline stages like 'docker build' and 'docker push' can run.
    build:
      context: ./jenkins                      # ./jenkins/Dockerfile installs docker.io + git
    container_name: jenkins
    user: root                                # Run as root so Docker CLI can read mounted certs
    restart: unless-stopped
    environment:
      - DOCKER_HOST=tcp://docker:2376         # ✅ Point Docker CLI to the DinD daemon by alias
      - DOCKER_CERT_PATH=/certs/client        # Client certificates location
      - DOCKER_TLS_VERIFY=1                   # Enforce TLS for the Docker client
    networks:
      jenkins: {}
    ports:
      - "8080:8080"                           # Jenkins UI
      - "50000:50000"                         # (Optional) inbound agents
    volumes:
      - jenkins-data:/var/jenkins_home        # Persist Jenkins config, plugins, jobs
      - docker-certs-client:/certs/client:ro  # Read-only client certs for Docker TLS
    depends_on:
      dind:
        condition: service_healthy            # ✅ Start Jenkins only after DinD is healthy

networks:
  jenkins: {}                                 # Shared user-defined network for name resolution

volumes:
  jenkins-data:                               # Named volume for persistent Jenkins data
  docker-certs-ca:                            # CA certs generated by DinD
  docker-certs-client:                        # Client certs consumed by Jenkins
  docker-cache:                               # Docker cache stored on host for speed

